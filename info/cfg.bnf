program : compstmt

#Statements with any number of line terminals
compstmt : stmts opt_terms

#Statements that cannot end with line terminals
stmts : none
	| stmt
	| stmts lin_terms stmt

#Single statement
stmt : KEYWORD_END '{' compstmt '}'
	| KEYWORD_BEGIN '{' compstmt '}'
	| if_block
	| until_block
	| unless_block
	| case_block
	| for_block
	| while_block
	| KEYWORD_RETURN expr
	| KEYWORD_YIELD args
	| KEYWORD_RETURN
	| KEYWORD_BREAK
	| KEYWORD_NEXT
	| KEYWORD_REDO
	| method_defn
	| class_defn
	| singleton_class_defn
	| expr

#Anything that evaluates
expr : assign_expr4

assign_expr4 : lhs bool_assign assign_expr4
	| assign_expr3

assign_expr3 : lhs shift_assign assign_expr3
	| assign_expr2

assign_expr2 : lhs op_assign assign_expr2
	| assign_expr1

assign_expr1 : lhs '=' assign_expr1
	| range_expr

range_expr : l13_expr SEQIN l13_expr
	| l13_expr SEQEX l13_expr
	| l13_expr

l13_expr : l13_expr OR l12_expr
	| l12_expr

l12_expr : l12_expr AND l11_expr
	| l11_expr

l11_expr : l10_expr op_eq l10_expr
	| l10_expr

l10_expr : l10_expr op_order l9_expr
	| l9_expr

l9_expr : l9_expr '|' l8_expr
	| l9_expr '^' l8_expr
	| l8_expr

l8_expr : l8_expr '&' l7_expr
	| l7_expr

l7_expr : l7_expr LSHIFT l6_expr
	| l7_expr RSHIFT l6_expr
	| l6_expr

l6_expr : l6_expr '+' l5_expr
	| l6_expr '-' l5_expr
	| l5_expr

l5_expr : l5_expr '*' l4_expr
	| l5_expr '/' l4_expr
	| l5_expr '%' l4_expr
	| l4_expr

l4_expr : '-' l3_expr
	| l3_expr

l3_expr : l2_expr POW l3_expr
	| l2_expr

l2_expr : '!' l1_expr
	| '~' l1_expr
	| '+' l1_expr
	| l1_expr

l1_expr : primary_expr

primary_expr : '(' expr ')'
	| user_var
	| key_var
	| literal
	| '[' arg_list ']'
	| primary_expr '[' expr ']'
	| primary_expr '.' method_var
	| method_call

#The value of evaluating a method
#Method invocation
method_call : primary_expr '.'  method_var args
	| method_var args
	| method_var '{' '|' block_param_list '|' compstmt '}' 
	| KEYWORD_SUPER
	| KEYWORD_SUPER args

#LHS of an assignment
lhs : user_var
	| primary_expr '.' LOCALVAR
	| primary_expr '.' CONST
	| primary_expr '[' expr ']'

#Argument list
args :  '(' arg_list ')'

arg_list : none
	| expr ',' arg_list_tail
	| expr

non_empty_arg_list : expr 	
	| expr ',' arg_list_tail

arg_list_tail : expr ',' arg_list_tail
	| expr

#IF Block
if_block : KEYWORD_IF expr then_clause compstmt if_tail KEYWORD_end

then_clause : KEYWORD_THEN
	| lin_term 
	| lin_term KEYWORD_THEN

if_tail : opt_else
	| KEYWORD_ELSIF expr then_clause compstmt if_tail

opt_else : KEYWORD_ELSE compstmt
	| none

#Until and Unless
until_block : KEYWORD_UNTIL expr do_clause compstmt KEYWORD_end

do_clause : lin_term
	| lin_term KEYWORD_DO
	| KEYWORD_DO

unless_block : KEYWORD_UNLESS expr then_clause compstmt opt_else KEYWORD_end

#While Block
while_block : KEYWORD_WHILE expr do_clause compstmt KEYWORD_end

#Case Block
case_block : KEYWORD_CASE expr opt_terms case_body KEYWORD_end

case_body : KEYWORD_WHEN non_empty_arg_list then_clause compstmt case_clause   

case_clause : opt_else 
	| case_body

#For Block
for_block : KEYWORD_FOR lhs KEYWORD_IN expr do_clause compstmt KEYWORD_end

#Class definition
class_defn : KEYWORD_CLASS CONST opt_inheritance lin_term compstmt KEYWORD_end

opt_inheritance : none
	| '<' primary_expr

#Singleton Class definition
singleton_class_defn : KEYWORD_CLASS LSHIFT singleton_var lin_term compstmt KEYWORD_end

#Method definition
method_defn : KEYWORD_DEF method_var method_params lin_term compstmt KEYWORD_end

method_params : none 
	| '(' param_list  ')'

param_list : none
	| non_empty_param_list

non_empty_param_list : LOCALVAR
	| LOCALVAR '=' expr ',' optional_param_list_tail
	| LOCALVAR '=' expr
	| LOCALVAR ',' non_empty_param_list

optional_param_list_tail : LOCALVAR '=' expr
	| optional_param_list_tail ',' LOCALVAR '=' expr

#Block Parameter list (for yield)
block_param_list : none
	| LOCALVAR
	| LOCALVAR ',' block_param_list_tail

block_param_list_tail : LOCALVAR
	| block_param_list_tail ',' LOCALVAR

#Pretty self explanatory names

opt_terms : none 
	| lin_terms

lin_terms : lin_term 
	| lin_terms lin_term

lin_term : ';' 
	| NEWLINE

literal : numeric 
	| CHAR 
	| STRING

op_assign : PLUSEQ
	| MINUSEQ
	| STAREQ
	| DIVEQ
	| MODEQ
	| POWEQ

op_eq : EQEQUAL
	| CASEEQ
	| NOTEQ
	| NOEQ

op_order : '<'
	| '>'
	| GTEQUAL
	| LTEQUAL

shift_assign : LSHIFTEQ
	| RSHIFTEQ

bool_assign : ANDEQ
	| OREQ
	| BITANDEQ
	| BITOREQ
	| BITNOTEQ

numeric : INT 
	| FLOAT

singleton_var : LOCALVAR
	| CONST
	| KEYWORD_SELF

method_var : LOCALVAR
	| METHOD_ONLY_VAR
	| CONST

user_var : LOCALVAR 
	| GLOBALVAR 
	| CLASSVAR 
	| INSTANCEVAR 
	| METHOD_ONLY_VAR 
	| CONST

key_var : KEYWORD_NIL 
	| KEYWORD_SELF 
	| KEYWORD_FALSE 
	| KEYWORD_TRUE 
	| KEYWORD_FILE 
	| KEYWORD_LINE 
	| KEYWORD_ENCODING
	| DOL0

none : 
