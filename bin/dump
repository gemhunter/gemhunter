def p_stmts(p):
	'''stmts : stmt
	| stmts lin_terms stmt
	'''
	if len(p) == 2:
		p[0] = p[1]
		return
	p[0] = {}
	list1 = p[1].get('breakList')
	list2 = p[3].get('breakList')
	if list1 == None and list2 != None:
		p[0]['breakList'] = list2
	elif list1 != None and list2 == None:
		p[0]['breakList'] = list1
	elif list1 != None and list2 != None:
		p[0]['breakList'] = list1 + list2
	
	list1 = p[1].get('nextList')
	list2 = p[3].get('nextList')
	if list1 == None and list2 != None:
		p[0]['nextList'] = list2
	elif list1 != None and list2 == None:
		p[0]['nextList'] = list1
	elif list1 != None and list2 != None:
		p[0]['nextList'] = list1 + list2
		
	list1 = p[1].get('redoList')
	list2 = p[3].get('redoList')
	if list1 == None and list2 != None:
		p[0]['redoList'] = list2
	elif list1 != None and list2 == None:
		p[0]['redoList'] = list1
	elif list1 != None and list2 != None:
		p[0]['redoList'] = list1 + list2



#Parser instructions
def p_program(p):
	'''program : compstmt
	'''
	p[0] = p[1]
	if p[0].get('breakList') != None:
		for i in p[0]['breakList']:
			error('Cannot use break outside loop', i[0])
	
	if p[0].get('nextList') != None:
		for i in p[0]['nextList']:
			error('Cannot use next outside loop', i[0])
	
	if p[0].get('redoList') != None:
		for i in p[0]['redoList']:
			error('Cannot use redo outside loop', i[0])